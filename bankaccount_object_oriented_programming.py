# -*- coding: utf-8 -*-
"""BankAccount object oriented programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vjitigs3k0YkxAVFFH4e4GRIVo8dUMf
"""

class BalanceException(Exception):
    pass
class BankAccount:
  def __init__(self,initialAmount,acctName):
    self.balance = initialAmount
    self.name= acctName
    print(f"\nAccount '{self.name}' created.\nBalance = ${self.balance:.2f}")

  def getBalance(self):
      print(f"\nAccount'{self.name}' balance = ${self.balance:.2f}")

  def deposit(self,amount):
      self.balance = self.balance + amount
      print("\nDeposit complete")
      self.getBalance()
  def viableTransaction(self,amount):
    if self.balance >= amount :
      return
    else:
      raise BalanceException(f"\nSorry, account'{self.name}'only has a balance of ${self.balance:.2f}")
  def withdraw(self,amount):
      try:
          self.viableTransaction(amount)
          self.balance=self.balance - amount
          print("\nWithdraw complete.")
          self.getBalance()
      except BalanceException as error :
          print(f'\nWithdraw interrupted :{error}')
  def transfer(self,amount,account):
      try :
        print('\n**********\n\nBeginning Transfer..')
        self.viableTransaction(amount)
        self.withdraw(amount)
        account.deposit(amount)
        print('\nTransfer complete!ðŸ˜€\n\n**********')
      except BalanceException as error :
        print(f'\nTransfer interrupted.{error}')
class InterestRewardsAcct(BankAccount):
  def deposit(self,amount):
      self.balance = self.balance + (amount*1.05)
      print("\nDeposit complete.")
      self.getBalance()
class SavingsAcct(InterestRewardsAcct):
    def __init__(self,initialAmount,acctName):
        super().__init__(initialAmount,acctName)
        self.fee = 5
    def withdraw(self,amount):
      try:
        self.viableTransaction(amount+self.fee)
        self.balance = self.balance - (amount+self.fee)
        print("\nWithdraw complete")
        self.getBalance()
      except BalanceException as error :
        print(f'\nWithdraw Interrupted: {error}')

Dave = BankAccount(1000,"Dave")
 Sara = BankAccount(2000,"Sara")

Dave.getBalance()
Sara.getBalance()
Sara.deposit(500)

Dave.withdraw(10000)

#Transfer
Dave.transfer(10000,Sara)

Dave.transfer(100,Sara)

Jim = InterestRewardsAcct(1000,"Jim")

Jim.getBalance()

Jim.deposit(100)

Jim.transfer(100,Dave)

Blaze = SavingsAcct(1000,"Blaze")
Blaze.getBalance()
Blaze.deposit(100)
Blaze.transfer(10000,Sara)

Blaze.transfer(1000,Sara)

